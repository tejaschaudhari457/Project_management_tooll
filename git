# Git Cheat Sheet

## 1. Setup & Configuration

### Configuring User Information
- `git config --global user.name "[firstname lastname]"`  
  Sets the name for commit credits.
- `git config --global user.email "[valid-email]"`  
  Associates an email with commits.
- `git config --global color.ui auto`  
  Enables colored output in the terminal for better readability.

### Initializing and Cloning Repositories
- `git init`  
  Initializes a new Git repository in the current directory.
- `git clone [url]`  
  Clones a remote repository to your local machine.

## 2. Stage & Snapshot

### Working with Snapshots
- `git status`  
  Shows modified and staged files.
- `git add [file]`  
  Stages a file for commit.
- `git reset [file]`  
  Unstages a file while keeping changes in the working directory.
- `git diff`  
  Views changes in the working directory (unstaged).
- `git diff --staged`  
  Views staged changes before committing.
- `git commit -m "[message]"`  
  Commits staged changes with a descriptive message.

## 3. Branching & Merging

### Branch Management
- `git branch`  
  Lists all branches (current branch marked with `*`).
- `git branch [branch-name]`  
  Creates a new branch.
- `git checkout [branch-name]`  
  Switches to another branch.
- `git merge [branch-name]`  
  Merges a branch into the current one.
- `git log`  
  Displays the commit history.

## 4. Remote Repositories

### Sharing & Updating
- `git remote add [alias] [url]`  
  Adds a remote repository.
- `git fetch [alias]`  
  Downloads changes from a remote repository.
- `git merge [alias]/[branch]`  
  Merges fetched changes into the current branch.
- `git push [alias] [branch]`  
  Pushes local commits to a remote repository.
- `git pull`  
  Fetches and merges updates from the remote repository.

## 5. Tracking File Changes

### Managing File Modifications
- `git rm [file]`  
  Deletes a file and stages the removal.
- `git mv [existing-path] [new-path]`  
  Renames or moves a file.
- `git log --stat -M`  
  Shows commit logs with file movement details.

## 6. Temporary Commits

### Stashing Changes
- `git stash`  
  Saves modified files temporarily.
- `git stash list`  
  Displays stashed changes.
- `git stash pop`  
  Applies the most recent stash and removes it from the stash list.
- `git stash drop`  
  Deletes the most recent stash.

## 7. Rewriting History

### Updating Commits & Clearing History
- `git rebase [branch]`  
  Moves commits from one branch onto another.
- `git reset --hard [commit]`  
  Resets the working directory to a previous commit (deletes changes).

## 8. Inspecting & Comparing

### Viewing History & Changes
- `git log`  
  Displays the commit history.
- `git log branchB..branchA`  
  Shows commits in `branchA` not in `branchB`.
- `git log --follow [file]`  
  Shows changes of a file, even after renaming.
- `git diff branchB...branchA`  
  Shows differences between two branches.
- `git show [SHA]`  
  Displays details of a specific commit.

## 9. Ignoring Unwanted Files

### Excluding Files from Git
- `git config --global core.excludesfile [file]`  
  Sets a global ignore file.
- Example `.gitignore` file:
  ```
  logs/
  *.notes
  pattern*/
  ```
  Specifies files or patterns to ignore.

## 10. Git Installation & GUI Tools

- GitHub provides platform-specific installers:
  - **Windows**: [https://windows.github.com](https://windows.github.com)
  - **Mac**: [https://mac.github.com](https://mac.github.com)
  - **Linux/Solaris**: [http://git-scm.com](http://git-scm.com)

## Summary
- **Stage changes**: `git add`
- **Commit changes**: `git commit`
- **Create & switch branches**: `git branch`, `git checkout`
- **Merge changes**: `git merge`
- **Sync with remote repositories**: `git push`, `git pull`
- **Track and manage file changes**: `git status`, `git diff`
- **Revert changes**: `git reset`, `git stash`
- **Ignore files**: Use `.gitignore`

This cheat sheet covers essential Git commands useful for beginners and experienced developers alike! ðŸš€

